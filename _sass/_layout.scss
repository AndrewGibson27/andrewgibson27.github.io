$width-breaks: (
  big: 1200px,
  mid: 800px,
  small: 400px
);

$gutter: 1em;

@mixin basic-grid {
  display: grid;
  grid-column-gap: $gutter;
  grid-row-gap: $gutter;
}

@mixin create-custom-columns($meta) {
  @each $map in $meta {
    $bp: map-get($map, 'bp');
    $cols: map-get($map, 'cols');
    $gutter: map-get($map, 'gutter');
    $inclusive: map-get($map, 'inclusive');

    @if $inclusive {
      @include mq($from: $bp) {
        grid-template-columns: $cols;
        grid-column-gap: $gutter;
        grid-row-gap: $gutter;
      }
    } @else {
      @include mq($until: $bp) {
        grid-template-columns: $cols;
        grid-column-gap: $gutter;
        grid-row-gap: $gutter;
      }
    }
  }
}

@each $name, $width in $width-breaks {
  .l-stack-until-#{$name} {
    @include mq($until: $width) {
      grid-template-columns: 1fr !important;
    }
  }

  .l-stack-from-#{$name} {
    @include mq($from: $width) {
      grid-template-columns: 1fr !important;
    }
  }
}

.l {
  &-master {
    display: grid;
    grid-auto-rows: minmax(100vh, auto);
    grid-template-areas:
      'hero'
      'eng'
      'viz';
    grid-template-columns: 1fr;

    &__area {
      &--hero {
        grid-area: hero;
      }

      &--eng {
        grid-area: eng;
      }

      &--viz {
        grid-area: viz;
      }
    }
  }

  &-wrapper {
    &--2-col {
      @include basic-grid;
      grid-template-columns: repeat(2, 1fr);
    }

    &--3-col {
      @include basic-grid;
      grid-template-columns: repeat(3, 1fr);
    }

    &--foo-col {
      display: grid;
      @include create-custom-columns((
        (
          bp: 1px,
          cols: 1fr,
          gutter: $gutter
        ),
        (
          bp: map-get($width-breaks, 'small'),
          cols: 1fr,
          gutter: $gutter,
          inclusive: true
        ),
        (
          bp: map-get($width-breaks, 'mid'),
          cols: repeat(3, 1fr),
          gutter: $gutter,
          inclusive: true
        ),
        (
          bp: map-get($width-breaks, 'big'),
          cols: 1fr,
          gutter: $gutter,
          inclusive: true
        ),
      ));
    }
  }
}
